// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  plan          String[]       @default([])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]

  @@map("users")
}

model Video {
  id            String              @id @default(cuid())
  title         String
  description   String?
  url           String
  fileSize      Int?
  mimeType      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  learningPaths LearningPathVideo[]

  @@map("videos")
}

model LearningPath {
  id          String              @id @default(cuid())
  title       String
  description String?
  videos      LearningPathVideo[]

  @@map("learning_paths")
}

model LearningPathVideo {
  learningPathId String
  videoId        String

  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  video        Video        @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([learningPathId, videoId]) // Composite Primary Key
  @@map("learning_path_videos")
}

model Plan {
  id            String         @id @default(cuid())
  name          String         @unique // Normal atau Premium
  price         Int // Harga langganan per bulan dalam IDR
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id") // Satu user hanya boleh punya satu plan utama aktif
  planId        String   @map("plan_id")
  hasQuizAccess Boolean  @default(false) // Apakah user memiliki akses ke quiz
  status        String   @default("active") // active, cancelled, expired
  expiresAt     DateTime // Tanggal kedaluwarsa langganan
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
