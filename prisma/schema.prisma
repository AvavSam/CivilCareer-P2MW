// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Video {
  id            String              @id @default(cuid())
  title         String
  description   String?
  url           String
  fileSize      Int?
  mimeType      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  learningPaths LearningPathVideo[]
}

model LearningPath {
  id          String              @id @default(cuid())
  title       String
  description String?
  videos      LearningPathVideo[]
}

model LearningPathVideo {
  learningPathId String
  videoId        String

  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  video        Video        @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([learningPathId, videoId]) // Composite Primary Key
}
